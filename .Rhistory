HEI2015_MIN_GREENNBEAN_SERV = 0
HEI2015_MAX_GREENNBEAN_SERV = 0.2
HEI2015_MIN_TOTALPRO_SERV = 0
HEI2015_MAX_TOTALPRO_SERV = 2.5
HEI2015_MIN_SEAPLANTPRO_SERV = 0
HEI2015_MAX_SEAPLANTPRO_SERV = 0.8
HEI2015_MIN_WHOLEGRAIN_SERV = 0
HEI2015_MAX_WHOLEGRAIN_SERV = 1.5
HEI2015_MIN_DAIRY_SERV = 0
HEI2015_MAX_DAIRY_SERV = 1.3
HEI2015_MIN_FATTYACID_SERV = 1.2
HEI2015_MAX_FATTYACID_SERV = 2.5
HEI2015_MIN_REFINEDGRAIN_SERV = 4.3
HEI2015_MAX_REFINEDGRAIN_SERV = 1.8
HEI2015_MIN_SODIUM_SERV = 2.0
HEI2015_MAX_SODIUM_SERV = 1.1
HEI2015_MIN_ADDEDSUGAR_SERV = 26
HEI2015_MAX_ADDEDSUGAR_SERV = 6.5
HEI2015_MIN_SATFAT_SERV = 16
HEI2015_MAX_SATFAT_SERV = 8
HEI2015_HEALTHY1 = function(actual, min, max){
case_when(
actual >= max ~ HEI2015_MAX1,
actual <= min ~ HEI2015_MIN,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX1/(max-min)
)
}
HEI2015_HEALTHY2 = function(actual, min, max){
case_when(
actual >= max ~ HEI2015_MAX2,
actual <= min ~ HEI2015_MIN,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX2/(max-min)
)
}
HEI2015_UNHEALTHY = function(actual, min, max){
case_when(
actual >= min ~ HEI2015_MIN,
actual <= max ~ HEI2015_MAX2,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX2/(max-min)
)
}
SERV_DATA %>%
mutate(
HEI2015_TOTALFRT = HEI2015_HEALTHY1(TOTALFRT_SERV, HEI2015_MIN_TOTALFRT_SERV, HEI2015_MAX_TOTALFRT_SERV),
HEI2015_FRT = HEI2015_HEALTHY1(FRT_SERV, HEI2015_MIN_FRT_SERV, HEI2015_MAX_FRT_SERV),
HEI2015_VEG = HEI2015_HEALTHY1(VEG_SERV, HEI2015_MIN_VEG_SERV, HEI2015_MAX_VEG_SERV),
HEI2015_GREENNBEAN = HEI2015_HEALTHY1(GREENNBEAN_SERV, HEI2015_MIN_GREENNBEAN_SERV, HEI2015_MAX_GREENNBEAN_SERV),
HEI2015_TOTALPRO = HEI2015_HEALTHY1(TOTALPRO_SERV, HEI2015_MIN_TOTALPRO_SERV, HEI2015_MAX_TOTALPRO_SERV),
HEI2015_SEAPLANTPRO = HEI2015_HEALTHY1(SEAPLANTPRO_SERV, HEI2015_MIN_SEAPLANTPRO_SERV, HEI2015_MAX_SEAPLANTPRO_SERV),
HEI2015_WHOLEGRAIN = HEI2015_HEALTHY2(WHOLEGRAIN_SERV, HEI2015_MIN_WHOLEGRAIN_SERV, HEI2015_MAX_WHOLEGRAIN_SERV),
HEI2015_DAIRY = HEI2015_HEALTHY2(DAIRY_SERV, HEI2015_MIN_DAIRY_SERV, HEI2015_MAX_DAIRY_SERV),
HEI2015_FATTYACID = HEI2015_HEALTHY2(FATTYACID_SERV, HEI2015_MIN_FATTYACID_SERV, HEI2015_MAX_FATTYACID_SERV),
HEI2015_REFINEDGRAIN = HEI2015_UNHEALTHY(REFINEDGRAIN_SERV, HEI2015_MIN_REFINEDGRAIN_SERV, HEI2015_MAX_REFINEDGRAIN_SERV),
HEI2015_SODIUM = HEI2015_UNHEALTHY(SODIUM_SERV, HEI2015_MIN_SODIUM_SERV, HEI2015_MAX_SODIUM_SERV),
HEI2015_ADDEDSUGAR = HEI2015_UNHEALTHY(ADDEDSUGAR_SERV, HEI2015_MIN_ADDEDSUGAR_SERV, HEI2015_MAX_ADDEDSUGAR_SERV),
HEI2015_SATFAT = HEI2015_UNHEALTHY(SATFAT_SERV, HEI2015_MIN_SATFAT_SERV, HEI2015_MAX_SATFAT_SERV),
HEI2015_ALL= HEI2015_TOTALFRT + HEI2015_FRT + HEI2015_VEG + HEI2015_GREENNBEAN +
HEI2015_TOTALPRO + HEI2015_SEAPLANTPRO + HEI2015_WHOLEGRAIN + HEI2015_DAIRY +
HEI2015_FATTYACID + HEI2015_REFINEDGRAIN + HEI2015_SODIUM + HEI2015_ADDEDSUGAR +
HEI2015_SATFAT
)
for(i in 1:length(SERV_DATA$DR1TKCAL)){
if (SERV_DATA$DR1TKCAL[i] == 0){
SERV_DATA$HEI2015_TOTALFRT[i] = 0
SERV_DATA$HEI2015_FRT[i] = 0
SERV_DATA$HEI2015_VEG[i] = 0
SERV_DATA$HEI2015_GREENNBEAN[i] = 0
SERV_DATA$HEI2015_TOTALPRO[i] = 0
SERV_DATA$HEI2015_SEAPLANTPRO[i] = 0
SERV_DATA$HEI2015_WHOLEGRAIN[i] = 0
SERV_DATA$HEI2015_DAIRY[i] = 0
SERV_DATA$HEI2015_FATTYACID[i] = 0
SERV_DATA$HEI2015_REFINEDGRAIN[i] = 0
SERV_DATA$HEI2015_ADDEDSUGAR[i] = 0
SERV_DATA$HEI2015_ALL[i] = 0
}
}
SERV_DATA=SERV_DATA %>%
select(HEI2015_ALL, HEI2015_TOTALFRT, HEI2015_FRT, HEI2015_VEG, HEI2015_GREENNBEAN,
HEI2015_TOTALPRO, HEI2015_SEAPLANTPRO, HEI2015_WHOLEGRAIN, HEI2015_DAIRY,
HEI2015_FATTYACID, HEI2015_REFINEDGRAIN, HEI2015_SODIUM, HEI2015_ADDEDSUGAR,
HEI2015_SATFAT)
return(SERV_DATA)
}
PROCESS_DATA = NHANES_FPED_PRE_HEI15(FPED_PATH, NUTRIENT_PATH, DEMO_PATH)
CLEAN_DATA = HEI2015_SERV(PROCESS_DATA, TYPE="NHANES_FPED")
HEI2015RESULT = HEI2015(CLEAN_DATA,
TOTALFRT_SERV, FRT_SERV, VEG_SERV, GREENNBEAN_SERV, TOTALPRO_SERV,
SEAPLANTPRO_SERV, WHOLEGRAIN_SERV, DAIRY_SERV, FATTYACID_SERV, REFINEDGRAIN_SERV,
SODIUM_SERV, ADDEDSUGAR_SERV, SATFAT_SERV)
HEI2015RESULT %>%
filter(DR1TSFAT == 0)
HEI2015RESULT
HEI2015RESULT %>%
summarize(
HEI2015_ALL_MIN = min(HEI2015_ALL),
HEI2015_ALL_MAX = max(HEI2015_ALL),
HEI2015_ALL_MEAN = mean(HEI2015_ALL)
)
HEI2015RESULT
# devtools::install_github("jamesjiadazhan/dietaryindex")
# library(dietaryindex)
library(dplyr)
FPED_PATH = "/Users/yan/Desktop/Emory University - Ph.D./Research rotation/Microbiome research/Diet score/RE__AA_cohort_dietary_index/NCI HEI SAS code/NHANES 2017-2018 DATA/FPED.csv"
NUTRIENT_PATH = "/Users/yan/Desktop/Emory University - Ph.D./Research rotation/Microbiome research/Diet score/RE__AA_cohort_dietary_index/NCI HEI SAS code/NHANES 2017-2018 DATA/NUTRIENT.csv"
DEMO_PATH = "/Users/yan/Desktop/Emory University - Ph.D./Research rotation/Microbiome research/Diet score/RE__AA_cohort_dietary_index/NCI HEI SAS code/NHANES 2017-2018 DATA/DEMO.csv"
NHANES_FPED_PRE_HEI15 = function(FPED_PATH, NUTRIENT_PATH, DEMO_PATH){
FPED = read.csv(FPED_PATH)
NUTRIENT = read.csv(NUTRIENT_PATH)
DEMO = read.csv(DEMO_PATH)
NUTRIENT = NUTRIENT %>%
filter(DR1DRSTZ == 1) %>%
select(SEQN, WTDRD1, DR1TKCAL, DR1TSFAT, DR1TALCO, DR1TSODI, DR1DRSTZ, DR1TMFAT, DR1TPFAT) %>%
arrange(SEQN)
DEMO = DEMO %>%
filter(RIDAGEYR >= 2) %>%
select(SEQN, RIDAGEYR, RIAGENDR, SDDSRVYR, SDMVPSU, SDMVSTRA) %>%
arrange(SEQN)
FPED = FPED %>%
arrange(SEQN)
COHORT = NUTRIENT %>%
inner_join(DEMO, by = c("SEQN" = "SEQN")) %>%
left_join(FPED, by = c("SEQN" = "SEQN"))
return(COHORT)
}
HEI2015_SERV = function(RAW_DATA, TYPE){
if (TYPE == "BLOCK"){
#Standard food frequency and portion size response code
STD_FOOD_FREQ = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
STD_FREQ_SERV = c(0, 1/90, 1/30, 2.5/30, 1/7, 2/7, 3.5/7, 5.5/7, 1)
STD_FOOD_PORT = c(1, 2, 3, 4)
STD_PORT_SERV = c(0.25, 0.5, 1, 2)
STD_LUNCHMEAT_PORT_SERV = c(1, 2, 3, 4)
STD_HOTDOG_PORT_SERV = c(1, 2, 3)
STD_FOOD_FREQ_DF = data.frame(STD_FOOD_FREQ, STD_FREQ_SERV)
STD_FOOD_PORT_DF= data.frame(STD_FOOD_PORT, STD_PORT_SERV)
#Match participant response food frequency to the standard food frequency response code
RAW_DATA %>%
mutate(
TOTALFRT_SERV = F_TOTAL/(DT_KCAL/1000),
FRT_SERV = F_SOLID/(DT_KCAL/1000),
VEG_SERV = (V_TOTAL+LEGUMES)/(DT_KCAL/1000),
GREEN_N_BEAN_SERV = (V_DRKGR+LEGUMES)/(DT_KCAL/1000),
TOTALPRO_SERV = (M_MPF+M_EGG+M_NUTSD+M_SOY+(LEGUMES*4))/(DT_KCAL/1000),
SEAPLANTPRO_SERV = (M_FISH_HI+M_FISH_LO+M_SOY+M_NUTSD+(LEGUMES*4))/(DT_KCAL/1000),
WHOLEGRAIN_SERV = G_WHL/(DT_KCAL/1000),
DAIRY_SERV = D_TOTAL/(DT_KCAL/1000),
FATTYACID_SERV = ifelse(DT_SFAT == 0, 0, (DT_MFAT + DT_PFAT)/DT_SFAT),
REFINEDGRAIN_SERV = G_NWHL/(DT_KCAL/1000),
SODIUM_SERV = (DT_SODI/1000)/(DT_KCAL/1000),
ADDEDSUGAR_SERV = ((ADD_SUG*4*4) / DT_KCAL)*100,
SATFAT_SERV = ((DT_SFAT*9)/DT_KCAL)*100
)
} else if(TYPE == "AARP"){
#Match participant response food frequency to the standard food frequency response code
RAW_DATA %>%
mutate(
mped_M_SOY=0,
TOTALFRT_SERV = mped_f_total/(calories/1000),
FRT_SERV = mped_f_nojuice/(calories/1000),
VEG_SERV = (mped_v_total+mped_legumes)/(calories/1000),
GREENNBEAN_SERV = (mped_v_drkgr+mped_legumes)/(calories/1000),
TOTALPRO_SERV = (mped_M_MPF+mped_M_EGG+mped_M_NUTSD+mped_M_SOY+(mped_legumes*4))/(calories/1000),
SEAPLANTPRO_SERV = (mped_M_FISH_HI+mped_M_FISH_LO+mped_M_SOY+(mped_legumes*4))/(calories/1000),
WHOLEGRAIN_SERV = mped_g_whl/(calories/1000),
DAIRY_SERV = mped_d_total/(calories/1000),
FATTYACID_SERV = ifelse(fatsaturated == 0, 0, (fatmono+fatpoly)/fatsaturated),
REFINEDGRAIN_SERV = mped_G_NWHL/(calories/1000),
SODIUM_SERV = (SODIUM/1000)/(calories/1000),
ADDEDSUGAR_SERV = ((mped_add_sug*4*4) / calories)*100,
SATFAT_SERV = ((fatsaturated*9)/calories)*100
)
} else if(TYPE == "NHANES_FPED"){
#Match participant response food frequency to the standard food frequency response code
RAW_DATA %>%
mutate(
TOTALFRT_SERV = DR1T_F_TOTAL/(DR1TKCAL/1000),
FRT_SERV = (DR1T_F_CITMLB+DR1T_F_OTHER)/(DR1TKCAL/1000),
VEG_SERV = (DR1T_V_TOTAL+DR1T_V_LEGUMES)/(DR1TKCAL/1000),
GREENNBEAN_SERV = (DR1T_V_DRKGR+DR1T_V_LEGUMES)/(DR1TKCAL/1000),
TOTALPRO_SERV = (DR1T_PF_MPS_TOTAL+DR1T_PF_EGGS+DR1T_PF_NUTSDS+DR1T_PF_SOY+DR1T_PF_LEGUMES)/(DR1TKCAL/1000),
SEAPLANTPRO_SERV = (DR1T_PF_SEAFD_HI+DR1T_PF_SEAFD_LOW+DR1T_PF_NUTSDS+DR1T_PF_SOY+DR1T_PF_LEGUMES)/(DR1TKCAL/1000),
WHOLEGRAIN_SERV = DR1T_G_WHOLE/(DR1TKCAL/1000),
DAIRY_SERV = DR1T_D_TOTAL/(DR1TKCAL/1000),
FATTYACID_SERV = ifelse(DR1TSFAT == 0, 0, (DR1TMFAT+DR1TPFAT)/DR1TSFAT),
REFINEDGRAIN_SERV = DR1T_G_REFINED/(DR1TKCAL/1000),
SODIUM_SERV = (DR1TSODI/1000)/(DR1TKCAL/1000),
ADDEDSUGAR_SERV = ((DR1T_ADD_SUGARS*4*4) / DR1TKCAL)*100,
SATFAT_SERV = ((DR1TSFAT*9)/DR1TKCAL)*100
)
} else{
print("Sorry, your input FFQ type is not currently supported. Current supported FFQs include: BLOCK, AARP, NHANES_FPED")
}
}
#Score calculation for HEI2015
HEI2015 = function(SERV_DATA, TOTALFRT_SERV, FRT_SERV, VEG_SERV, GREENNBEAN_SERV, TOTALPRO_SERV,
SEAPLANTPRO_SERV, WHOLEGRAIN_SERV, DAIRY_SERV, FATTYACID_SERV, REFINEDGRAIN_SERV,
SODIUM_SERV, ADDEDSUGAR_SERV, SATFAT_SERV){
##Create variables needed for HEI2015 calculation
HEI2015_MIN = 0
HEI2015_MAX1 = 5
HEI2015_MAX2 = 10
HEI2015_MIN_TOTALFRT_SERV = 0
HEI2015_MAX_TOTALFRT_SERV = 0.8
HEI2015_MIN_FRT_SERV = 0
HEI2015_MAX_FRT_SERV = 0.4
HEI2015_MIN_VEG_SERV = 0
HEI2015_MAX_VEG_SERV = 1.1
HEI2015_MIN_GREENNBEAN_SERV = 0
HEI2015_MAX_GREENNBEAN_SERV = 0.2
HEI2015_MIN_TOTALPRO_SERV = 0
HEI2015_MAX_TOTALPRO_SERV = 2.5
HEI2015_MIN_SEAPLANTPRO_SERV = 0
HEI2015_MAX_SEAPLANTPRO_SERV = 0.8
HEI2015_MIN_WHOLEGRAIN_SERV = 0
HEI2015_MAX_WHOLEGRAIN_SERV = 1.5
HEI2015_MIN_DAIRY_SERV = 0
HEI2015_MAX_DAIRY_SERV = 1.3
HEI2015_MIN_FATTYACID_SERV = 1.2
HEI2015_MAX_FATTYACID_SERV = 2.5
HEI2015_MIN_REFINEDGRAIN_SERV = 4.3
HEI2015_MAX_REFINEDGRAIN_SERV = 1.8
HEI2015_MIN_SODIUM_SERV = 2.0
HEI2015_MAX_SODIUM_SERV = 1.1
HEI2015_MIN_ADDEDSUGAR_SERV = 26
HEI2015_MAX_ADDEDSUGAR_SERV = 6.5
HEI2015_MIN_SATFAT_SERV = 16
HEI2015_MAX_SATFAT_SERV = 8
HEI2015_HEALTHY1 = function(actual, min, max){
case_when(
actual >= max ~ HEI2015_MAX1,
actual <= min ~ HEI2015_MIN,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX1/(max-min)
)
}
HEI2015_HEALTHY2 = function(actual, min, max){
case_when(
actual >= max ~ HEI2015_MAX2,
actual <= min ~ HEI2015_MIN,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX2/(max-min)
)
}
HEI2015_UNHEALTHY = function(actual, min, max){
case_when(
actual >= min ~ HEI2015_MIN,
actual <= max ~ HEI2015_MAX2,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX2/(max-min)
)
}
SERV_DATA %>%
mutate(
HEI2015_TOTALFRT = HEI2015_HEALTHY1(TOTALFRT_SERV, HEI2015_MIN_TOTALFRT_SERV, HEI2015_MAX_TOTALFRT_SERV),
HEI2015_FRT = HEI2015_HEALTHY1(FRT_SERV, HEI2015_MIN_FRT_SERV, HEI2015_MAX_FRT_SERV),
HEI2015_VEG = HEI2015_HEALTHY1(VEG_SERV, HEI2015_MIN_VEG_SERV, HEI2015_MAX_VEG_SERV),
HEI2015_GREENNBEAN = HEI2015_HEALTHY1(GREENNBEAN_SERV, HEI2015_MIN_GREENNBEAN_SERV, HEI2015_MAX_GREENNBEAN_SERV),
HEI2015_TOTALPRO = HEI2015_HEALTHY1(TOTALPRO_SERV, HEI2015_MIN_TOTALPRO_SERV, HEI2015_MAX_TOTALPRO_SERV),
HEI2015_SEAPLANTPRO = HEI2015_HEALTHY1(SEAPLANTPRO_SERV, HEI2015_MIN_SEAPLANTPRO_SERV, HEI2015_MAX_SEAPLANTPRO_SERV),
HEI2015_WHOLEGRAIN = HEI2015_HEALTHY2(WHOLEGRAIN_SERV, HEI2015_MIN_WHOLEGRAIN_SERV, HEI2015_MAX_WHOLEGRAIN_SERV),
HEI2015_DAIRY = HEI2015_HEALTHY2(DAIRY_SERV, HEI2015_MIN_DAIRY_SERV, HEI2015_MAX_DAIRY_SERV),
HEI2015_FATTYACID = HEI2015_HEALTHY2(FATTYACID_SERV, HEI2015_MIN_FATTYACID_SERV, HEI2015_MAX_FATTYACID_SERV),
HEI2015_REFINEDGRAIN = HEI2015_UNHEALTHY(REFINEDGRAIN_SERV, HEI2015_MIN_REFINEDGRAIN_SERV, HEI2015_MAX_REFINEDGRAIN_SERV),
HEI2015_SODIUM = HEI2015_UNHEALTHY(SODIUM_SERV, HEI2015_MIN_SODIUM_SERV, HEI2015_MAX_SODIUM_SERV),
HEI2015_ADDEDSUGAR = HEI2015_UNHEALTHY(ADDEDSUGAR_SERV, HEI2015_MIN_ADDEDSUGAR_SERV, HEI2015_MAX_ADDEDSUGAR_SERV),
HEI2015_SATFAT = HEI2015_UNHEALTHY(SATFAT_SERV, HEI2015_MIN_SATFAT_SERV, HEI2015_MAX_SATFAT_SERV),
HEI2015_ALL= HEI2015_TOTALFRT + HEI2015_FRT + HEI2015_VEG + HEI2015_GREENNBEAN +
HEI2015_TOTALPRO + HEI2015_SEAPLANTPRO + HEI2015_WHOLEGRAIN + HEI2015_DAIRY +
HEI2015_FATTYACID + HEI2015_REFINEDGRAIN + HEI2015_SODIUM + HEI2015_ADDEDSUGAR +
HEI2015_SATFAT
)
for(i in 1:length(SERV_DATA$DR1TKCAL)){
if (SERV_DATA$DR1TKCAL[i] == 0){
SERV_DATA$HEI2015_TOTALFRT[i] = 0
SERV_DATA$HEI2015_FRT[i] = 0
SERV_DATA$HEI2015_VEG[i] = 0
SERV_DATA$HEI2015_GREENNBEAN[i] = 0
SERV_DATA$HEI2015_TOTALPRO[i] = 0
SERV_DATA$HEI2015_SEAPLANTPRO[i] = 0
SERV_DATA$HEI2015_WHOLEGRAIN[i] = 0
SERV_DATA$HEI2015_DAIRY[i] = 0
SERV_DATA$HEI2015_FATTYACID[i] = 0
SERV_DATA$HEI2015_REFINEDGRAIN[i] = 0
SERV_DATA$HEI2015_ADDEDSUGAR[i] = 0
SERV_DATA$HEI2015_ALL[i] = 0
}
}
SERV_DATA %>%
select(HEI2015_ALL, HEI2015_TOTALFRT, HEI2015_FRT, HEI2015_VEG, HEI2015_GREENNBEAN,
HEI2015_TOTALPRO, HEI2015_SEAPLANTPRO, HEI2015_WHOLEGRAIN, HEI2015_DAIRY,
HEI2015_FATTYACID, HEI2015_REFINEDGRAIN, HEI2015_SODIUM, HEI2015_ADDEDSUGAR,
HEI2015_SATFAT)
}
PROCESS_DATA = NHANES_FPED_PRE_HEI15(FPED_PATH, NUTRIENT_PATH, DEMO_PATH)
CLEAN_DATA = HEI2015_SERV(PROCESS_DATA, TYPE="NHANES_FPED")
HEI2015RESULT = HEI2015(CLEAN_DATA,
TOTALFRT_SERV, FRT_SERV, VEG_SERV, GREENNBEAN_SERV, TOTALPRO_SERV,
SEAPLANTPRO_SERV, WHOLEGRAIN_SERV, DAIRY_SERV, FATTYACID_SERV, REFINEDGRAIN_SERV,
SODIUM_SERV, ADDEDSUGAR_SERV, SATFAT_SERV)
HEI2015RESULT %>%
filter(DR1TSFAT == 0)
HEI2015RESULT
HEI2015RESULT %>%
summarize(
HEI2015_ALL_MIN = min(HEI2015_ALL),
HEI2015_ALL_MAX = max(HEI2015_ALL),
HEI2015_ALL_MEAN = mean(HEI2015_ALL)
)
# devtools::install_github("jamesjiadazhan/dietaryindex")
# library(dietaryindex)
library(dplyr)
FPED_PATH = "/Users/yan/Desktop/Emory University - Ph.D./Research rotation/Microbiome research/Diet score/RE__AA_cohort_dietary_index/NCI HEI SAS code/NHANES 2017-2018 DATA/FPED.csv"
NUTRIENT_PATH = "/Users/yan/Desktop/Emory University - Ph.D./Research rotation/Microbiome research/Diet score/RE__AA_cohort_dietary_index/NCI HEI SAS code/NHANES 2017-2018 DATA/NUTRIENT.csv"
DEMO_PATH = "/Users/yan/Desktop/Emory University - Ph.D./Research rotation/Microbiome research/Diet score/RE__AA_cohort_dietary_index/NCI HEI SAS code/NHANES 2017-2018 DATA/DEMO.csv"
NHANES_FPED_PRE_HEI15 = function(FPED_PATH, NUTRIENT_PATH, DEMO_PATH){
FPED = read.csv(FPED_PATH)
NUTRIENT = read.csv(NUTRIENT_PATH)
DEMO = read.csv(DEMO_PATH)
NUTRIENT = NUTRIENT %>%
filter(DR1DRSTZ == 1) %>%
select(SEQN, WTDRD1, DR1TKCAL, DR1TSFAT, DR1TALCO, DR1TSODI, DR1DRSTZ, DR1TMFAT, DR1TPFAT) %>%
arrange(SEQN)
DEMO = DEMO %>%
filter(RIDAGEYR >= 2) %>%
select(SEQN, RIDAGEYR, RIAGENDR, SDDSRVYR, SDMVPSU, SDMVSTRA) %>%
arrange(SEQN)
FPED = FPED %>%
arrange(SEQN)
COHORT = NUTRIENT %>%
inner_join(DEMO, by = c("SEQN" = "SEQN")) %>%
left_join(FPED, by = c("SEQN" = "SEQN"))
return(COHORT)
}
HEI2015_SERV = function(RAW_DATA, TYPE){
if (TYPE == "BLOCK"){
#Standard food frequency and portion size response code
STD_FOOD_FREQ = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
STD_FREQ_SERV = c(0, 1/90, 1/30, 2.5/30, 1/7, 2/7, 3.5/7, 5.5/7, 1)
STD_FOOD_PORT = c(1, 2, 3, 4)
STD_PORT_SERV = c(0.25, 0.5, 1, 2)
STD_LUNCHMEAT_PORT_SERV = c(1, 2, 3, 4)
STD_HOTDOG_PORT_SERV = c(1, 2, 3)
STD_FOOD_FREQ_DF = data.frame(STD_FOOD_FREQ, STD_FREQ_SERV)
STD_FOOD_PORT_DF= data.frame(STD_FOOD_PORT, STD_PORT_SERV)
#Match participant response food frequency to the standard food frequency response code
RAW_DATA %>%
mutate(
TOTALFRT_SERV = F_TOTAL/(DT_KCAL/1000),
FRT_SERV = F_SOLID/(DT_KCAL/1000),
VEG_SERV = (V_TOTAL+LEGUMES)/(DT_KCAL/1000),
GREEN_N_BEAN_SERV = (V_DRKGR+LEGUMES)/(DT_KCAL/1000),
TOTALPRO_SERV = (M_MPF+M_EGG+M_NUTSD+M_SOY+(LEGUMES*4))/(DT_KCAL/1000),
SEAPLANTPRO_SERV = (M_FISH_HI+M_FISH_LO+M_SOY+M_NUTSD+(LEGUMES*4))/(DT_KCAL/1000),
WHOLEGRAIN_SERV = G_WHL/(DT_KCAL/1000),
DAIRY_SERV = D_TOTAL/(DT_KCAL/1000),
FATTYACID_SERV = ifelse(DT_SFAT == 0, 0, (DT_MFAT + DT_PFAT)/DT_SFAT),
REFINEDGRAIN_SERV = G_NWHL/(DT_KCAL/1000),
SODIUM_SERV = (DT_SODI/1000)/(DT_KCAL/1000),
ADDEDSUGAR_SERV = ((ADD_SUG*4*4) / DT_KCAL)*100,
SATFAT_SERV = ((DT_SFAT*9)/DT_KCAL)*100
)
} else if(TYPE == "AARP"){
#Match participant response food frequency to the standard food frequency response code
RAW_DATA %>%
mutate(
mped_M_SOY=0,
TOTALFRT_SERV = mped_f_total/(calories/1000),
FRT_SERV = mped_f_nojuice/(calories/1000),
VEG_SERV = (mped_v_total+mped_legumes)/(calories/1000),
GREENNBEAN_SERV = (mped_v_drkgr+mped_legumes)/(calories/1000),
TOTALPRO_SERV = (mped_M_MPF+mped_M_EGG+mped_M_NUTSD+mped_M_SOY+(mped_legumes*4))/(calories/1000),
SEAPLANTPRO_SERV = (mped_M_FISH_HI+mped_M_FISH_LO+mped_M_SOY+(mped_legumes*4))/(calories/1000),
WHOLEGRAIN_SERV = mped_g_whl/(calories/1000),
DAIRY_SERV = mped_d_total/(calories/1000),
FATTYACID_SERV = ifelse(fatsaturated == 0, 0, (fatmono+fatpoly)/fatsaturated),
REFINEDGRAIN_SERV = mped_G_NWHL/(calories/1000),
SODIUM_SERV = (SODIUM/1000)/(calories/1000),
ADDEDSUGAR_SERV = ((mped_add_sug*4*4) / calories)*100,
SATFAT_SERV = ((fatsaturated*9)/calories)*100
)
} else if(TYPE == "NHANES_FPED"){
#Match participant response food frequency to the standard food frequency response code
RAW_DATA %>%
mutate(
TOTALFRT_SERV = DR1T_F_TOTAL/(DR1TKCAL/1000),
FRT_SERV = (DR1T_F_CITMLB+DR1T_F_OTHER)/(DR1TKCAL/1000),
VEG_SERV = (DR1T_V_TOTAL+DR1T_V_LEGUMES)/(DR1TKCAL/1000),
GREENNBEAN_SERV = (DR1T_V_DRKGR+DR1T_V_LEGUMES)/(DR1TKCAL/1000),
TOTALPRO_SERV = (DR1T_PF_MPS_TOTAL+DR1T_PF_EGGS+DR1T_PF_NUTSDS+DR1T_PF_SOY+DR1T_PF_LEGUMES)/(DR1TKCAL/1000),
SEAPLANTPRO_SERV = (DR1T_PF_SEAFD_HI+DR1T_PF_SEAFD_LOW+DR1T_PF_NUTSDS+DR1T_PF_SOY+DR1T_PF_LEGUMES)/(DR1TKCAL/1000),
WHOLEGRAIN_SERV = DR1T_G_WHOLE/(DR1TKCAL/1000),
DAIRY_SERV = DR1T_D_TOTAL/(DR1TKCAL/1000),
FATTYACID_SERV = ifelse(DR1TSFAT == 0, 0, (DR1TMFAT+DR1TPFAT)/DR1TSFAT),
REFINEDGRAIN_SERV = DR1T_G_REFINED/(DR1TKCAL/1000),
SODIUM_SERV = (DR1TSODI/1000)/(DR1TKCAL/1000),
ADDEDSUGAR_SERV = ((DR1T_ADD_SUGARS*4*4) / DR1TKCAL)*100,
SATFAT_SERV = ((DR1TSFAT*9)/DR1TKCAL)*100
)
} else{
print("Sorry, your input FFQ type is not currently supported. Current supported FFQs include: BLOCK, AARP, NHANES_FPED")
}
}
#Score calculation for HEI2015
HEI2015 = function(SERV_DATA, TOTALFRT_SERV, FRT_SERV, VEG_SERV, GREENNBEAN_SERV, TOTALPRO_SERV,
SEAPLANTPRO_SERV, WHOLEGRAIN_SERV, DAIRY_SERV, FATTYACID_SERV, REFINEDGRAIN_SERV,
SODIUM_SERV, ADDEDSUGAR_SERV, SATFAT_SERV){
##Create variables needed for HEI2015 calculation
HEI2015_MIN = 0
HEI2015_MAX1 = 5
HEI2015_MAX2 = 10
HEI2015_MIN_TOTALFRT_SERV = 0
HEI2015_MAX_TOTALFRT_SERV = 0.8
HEI2015_MIN_FRT_SERV = 0
HEI2015_MAX_FRT_SERV = 0.4
HEI2015_MIN_VEG_SERV = 0
HEI2015_MAX_VEG_SERV = 1.1
HEI2015_MIN_GREENNBEAN_SERV = 0
HEI2015_MAX_GREENNBEAN_SERV = 0.2
HEI2015_MIN_TOTALPRO_SERV = 0
HEI2015_MAX_TOTALPRO_SERV = 2.5
HEI2015_MIN_SEAPLANTPRO_SERV = 0
HEI2015_MAX_SEAPLANTPRO_SERV = 0.8
HEI2015_MIN_WHOLEGRAIN_SERV = 0
HEI2015_MAX_WHOLEGRAIN_SERV = 1.5
HEI2015_MIN_DAIRY_SERV = 0
HEI2015_MAX_DAIRY_SERV = 1.3
HEI2015_MIN_FATTYACID_SERV = 1.2
HEI2015_MAX_FATTYACID_SERV = 2.5
HEI2015_MIN_REFINEDGRAIN_SERV = 4.3
HEI2015_MAX_REFINEDGRAIN_SERV = 1.8
HEI2015_MIN_SODIUM_SERV = 2.0
HEI2015_MAX_SODIUM_SERV = 1.1
HEI2015_MIN_ADDEDSUGAR_SERV = 26
HEI2015_MAX_ADDEDSUGAR_SERV = 6.5
HEI2015_MIN_SATFAT_SERV = 16
HEI2015_MAX_SATFAT_SERV = 8
HEI2015_HEALTHY1 = function(actual, min, max){
case_when(
actual >= max ~ HEI2015_MAX1,
actual <= min ~ HEI2015_MIN,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX1/(max-min)
)
}
HEI2015_HEALTHY2 = function(actual, min, max){
case_when(
actual >= max ~ HEI2015_MAX2,
actual <= min ~ HEI2015_MIN,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX2/(max-min)
)
}
HEI2015_UNHEALTHY = function(actual, min, max){
case_when(
actual >= min ~ HEI2015_MIN,
actual <= max ~ HEI2015_MAX2,
TRUE ~ HEI2015_MIN+(actual-min)*HEI2015_MAX2/(max-min)
)
}
SERV_DATA=SERV_DATA %>%
mutate(
HEI2015_TOTALFRT = HEI2015_HEALTHY1(TOTALFRT_SERV, HEI2015_MIN_TOTALFRT_SERV, HEI2015_MAX_TOTALFRT_SERV),
HEI2015_FRT = HEI2015_HEALTHY1(FRT_SERV, HEI2015_MIN_FRT_SERV, HEI2015_MAX_FRT_SERV),
HEI2015_VEG = HEI2015_HEALTHY1(VEG_SERV, HEI2015_MIN_VEG_SERV, HEI2015_MAX_VEG_SERV),
HEI2015_GREENNBEAN = HEI2015_HEALTHY1(GREENNBEAN_SERV, HEI2015_MIN_GREENNBEAN_SERV, HEI2015_MAX_GREENNBEAN_SERV),
HEI2015_TOTALPRO = HEI2015_HEALTHY1(TOTALPRO_SERV, HEI2015_MIN_TOTALPRO_SERV, HEI2015_MAX_TOTALPRO_SERV),
HEI2015_SEAPLANTPRO = HEI2015_HEALTHY1(SEAPLANTPRO_SERV, HEI2015_MIN_SEAPLANTPRO_SERV, HEI2015_MAX_SEAPLANTPRO_SERV),
HEI2015_WHOLEGRAIN = HEI2015_HEALTHY2(WHOLEGRAIN_SERV, HEI2015_MIN_WHOLEGRAIN_SERV, HEI2015_MAX_WHOLEGRAIN_SERV),
HEI2015_DAIRY = HEI2015_HEALTHY2(DAIRY_SERV, HEI2015_MIN_DAIRY_SERV, HEI2015_MAX_DAIRY_SERV),
HEI2015_FATTYACID = HEI2015_HEALTHY2(FATTYACID_SERV, HEI2015_MIN_FATTYACID_SERV, HEI2015_MAX_FATTYACID_SERV),
HEI2015_REFINEDGRAIN = HEI2015_UNHEALTHY(REFINEDGRAIN_SERV, HEI2015_MIN_REFINEDGRAIN_SERV, HEI2015_MAX_REFINEDGRAIN_SERV),
HEI2015_SODIUM = HEI2015_UNHEALTHY(SODIUM_SERV, HEI2015_MIN_SODIUM_SERV, HEI2015_MAX_SODIUM_SERV),
HEI2015_ADDEDSUGAR = HEI2015_UNHEALTHY(ADDEDSUGAR_SERV, HEI2015_MIN_ADDEDSUGAR_SERV, HEI2015_MAX_ADDEDSUGAR_SERV),
HEI2015_SATFAT = HEI2015_UNHEALTHY(SATFAT_SERV, HEI2015_MIN_SATFAT_SERV, HEI2015_MAX_SATFAT_SERV),
HEI2015_ALL= HEI2015_TOTALFRT + HEI2015_FRT + HEI2015_VEG + HEI2015_GREENNBEAN +
HEI2015_TOTALPRO + HEI2015_SEAPLANTPRO + HEI2015_WHOLEGRAIN + HEI2015_DAIRY +
HEI2015_FATTYACID + HEI2015_REFINEDGRAIN + HEI2015_SODIUM + HEI2015_ADDEDSUGAR +
HEI2015_SATFAT
)
for(i in 1:length(SERV_DATA$DR1TKCAL)){
if (SERV_DATA$DR1TKCAL[i] == 0){
SERV_DATA$HEI2015_TOTALFRT[i] = 0
SERV_DATA$HEI2015_FRT[i] = 0
SERV_DATA$HEI2015_VEG[i] = 0
SERV_DATA$HEI2015_GREENNBEAN[i] = 0
SERV_DATA$HEI2015_TOTALPRO[i] = 0
SERV_DATA$HEI2015_SEAPLANTPRO[i] = 0
SERV_DATA$HEI2015_WHOLEGRAIN[i] = 0
SERV_DATA$HEI2015_DAIRY[i] = 0
SERV_DATA$HEI2015_FATTYACID[i] = 0
SERV_DATA$HEI2015_REFINEDGRAIN[i] = 0
SERV_DATA$HEI2015_ADDEDSUGAR[i] = 0
SERV_DATA$HEI2015_ALL[i] = 0
}
}
SERV_DATA %>%
select(HEI2015_ALL, HEI2015_TOTALFRT, HEI2015_FRT, HEI2015_VEG, HEI2015_GREENNBEAN,
HEI2015_TOTALPRO, HEI2015_SEAPLANTPRO, HEI2015_WHOLEGRAIN, HEI2015_DAIRY,
HEI2015_FATTYACID, HEI2015_REFINEDGRAIN, HEI2015_SODIUM, HEI2015_ADDEDSUGAR,
HEI2015_SATFAT)
}
PROCESS_DATA = NHANES_FPED_PRE_HEI15(FPED_PATH, NUTRIENT_PATH, DEMO_PATH)
CLEAN_DATA = HEI2015_SERV(PROCESS_DATA, TYPE="NHANES_FPED")
HEI2015RESULT = HEI2015(CLEAN_DATA,
TOTALFRT_SERV, FRT_SERV, VEG_SERV, GREENNBEAN_SERV, TOTALPRO_SERV,
SEAPLANTPRO_SERV, WHOLEGRAIN_SERV, DAIRY_SERV, FATTYACID_SERV, REFINEDGRAIN_SERV,
SODIUM_SERV, ADDEDSUGAR_SERV, SATFAT_SERV)
HEI2015RESULT %>%
filter(DR1TSFAT == 0)
HEI2015RESULT
HEI2015RESULT %>%
summarize(
HEI2015_ALL_MIN = min(HEI2015_ALL),
HEI2015_ALL_MAX = max(HEI2015_ALL),
HEI2015_ALL_MEAN = mean(HEI2015_ALL)
)
